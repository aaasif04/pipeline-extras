space = 'dev'
s3Artifactory = 'lsm-artifactory'
ansiblePlaybook='/opt/ansible/bin/ansible-playbook'
appname='cear-workbench'
playbookFile='/tmp/codecommit/pai-infra-devops/Ansible/Deployment/cear-workbench/deploy.yaml'
inventory_file='/tmp/inventory_file'

pipeline{
    agent any
    stages{
        stage('gitCheckoutPipeLine'){
            steps{
                checkout(
	                    [$class: 'GitSCM', 
	                    branches: [[name: '*/jenkins-LSMP1-276']],
	                    doGenerateSubmoduleConfigurations: false,
	                    extensions: [[$class: 'RelativeTargetDirectory',
	                    relativeTargetDir: './pai-infra-devops']],
	                    submoduleCfg: [],
	                    userRemoteConfigs: [[url: 'https://git-codecommit.us-east-1.amazonaws.com/v1/repos/pai-infra-devops']]
                        ]
                )
            }
        }
        stage('getRollbackversion'){
            steps{
                script{
                    rollbackVersion = sh (script: "aws s3 ls s3://${s3Artifactory}/${space}/${appname} --recursive |sort |awk \'{print \$4}\' |tail -2|head -1", returnStdout: true).trim()
                    rollbackVersion = sh (script: "aws s3 ls s3://${s3Artifactory}/${space}/${appname} --recursive |sort |tail -2 |head -1 |awk -F \"/\" \'{print \$3}\'", returnStdout: true).trim()
                }
            }
        }
        stage ('rollback'){
            steps{
                ansiblePlaybook(
                  become: true,
	              disableHostKeyChecking: true,
	              installation: 'ansible',
	              inventory: './pai-infra-devops/cicd/cear-workbench/Ansible/inventory_file',
	              playbook: './pai-infra-devops/cicd/cear-workbench/Ansible/staging-deploy.yaml',
	              extraVars: [version: "${rollbackVersion}",]
                )
            }
        }
    }

}
